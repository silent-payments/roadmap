name: Sync Issue to Project

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to sync (optional - syncs all if empty)'
        required: false

jobs:
  sync-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Sync Issue to Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_SYNC_TOKEN }}
          script: |
            // Load change detection script
            const changeDetection = require('./.github/scripts/change-detection.js');
            
            // Determine if workflow should run
            const decision = changeDetection.shouldRunWorkflow(context);
            
            if (!decision.shouldRun) {
              console.log(`ðŸ›‘ Workflow stopped: ${decision.reason}`);
              return;
            }
            
            console.log(`âœ… Workflow proceeding: ${decision.reason}`);
            
            // Load external scripts
            const getIssueData = require('./.github/scripts/get-issue-data.js');
            const parseIssue = require('./.github/scripts/parse-issue.js');
            const syncProject = require('./.github/scripts/sync-project.js');
            
            // Get issue data
            const inputs = {
              issue_number: '${{ inputs.issue_number }}'
            };
            const issueData = await getIssueData.getIssueData(github, context, inputs);
            const issueBody = issueData.body || '';
            
            console.log('Processing issue:', issueData.number);
            
            // Parse issue data - prefer form data when changes detected, otherwise use metadata
            let formData = parseIssue.parseFormData(issueBody);
            const existingMetadata = parseIssue.parseMetadata(issueBody);
            
            // If no form fields present, use existing metadata
            if (!formData.status && !formData.area && !formData.release_phase && existingMetadata) {
              formData = existingMetadata;
              console.log('No form fields found, using existing metadata:', formData);
            } else {
              // Merge form data with existing metadata for any missing fields
              if (existingMetadata) {
                formData = {
                  status: formData.status || existingMetadata.status,
                  release_phase: formData.release_phase || existingMetadata.release_phase,
                  area: formData.area || existingMetadata.area
                };
                console.log('Merged form data with existing metadata:', formData);
              } else {
                console.log('Using form data for first sync:', formData);
              }
            }
            
            // Sync to project
            await syncProject.syncToProject(github, context, issueData, formData);
            
            // Always clean up form data after successful sync
            console.log('Cleaning up form data from issue body');
            
            // Check if issue has form fields that need cleaning
            const hasFormFields = issueBody.includes('## Status') || 
                                 issueBody.includes('## Area') || 
                                 issueBody.includes('## Release Phase');
            
            if (hasFormFields) {
              // Extract content and rebuild clean body
              const content = parseIssue.extractContent(issueBody);
              const metadata = {
                status: formData.status,
                release_phase: formData.release_phase,
                area: formData.area,
                last_sync: new Date().toISOString()
              };
              
              const cleanBody = parseIssue.buildCleanBody(content, metadata);
              
              // Update issue with clean body
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueData.number,
                body: cleanBody
              });
              
              console.log('Form fields cleaned up and metadata updated');
            } else {
              console.log('No form fields to clean up, no changes needed');
            }
            
            console.log('Sync completed successfully!');